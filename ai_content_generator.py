"""
Enhanced AI Content Generator dla MultiSafety.pl
Profesjonalne tre≈õci Instagram z fokusem na BHP, RODO, CE, Doz√≥r UrzƒÖdze≈Ñ
"""

import os
import json
import random
from typing import Dict, List, Optional
from dataclasses import dataclass

# Pr√≥ba importu bibliotek AI
try:
    import openai
    OPENAI_AVAILABLE = True
except ImportError:
    OPENAI_AVAILABLE = False

try:
    import anthropic
    ANTHROPIC_AVAILABLE = True
except ImportError:
    ANTHROPIC_AVAILABLE = False

@dataclass
class ContentRequest:
    """Struktura ≈ºƒÖdania tre≈õci"""
    specialization: str
    content_type: str  # 'post' lub 'reel'
    template_type: str
    custom_topic: Optional[str] = None
    tone: str = 'professional'
    target_audience: str = 'business'

@dataclass
class GeneratedContent:
    """Struktura wygenerowanej tre≈õci"""
    title: str
    hook: str
    main_content: str
    call_to_action: str
    hashtags: List[str]
    full_text: str

# PREMIUM CONTENT LIBRARY FOR MULTISAFETY.PL
MULTISAFETY_PREMIUM_CONTENT = {
    "bhp_ppoz": {
        "tips": [
            """üí° Czy wiesz, ≈ºe ka≈ºdy 1 z≈Ç wydany na BHP zwraca 2,2 z≈Ç oszczƒôdno≈õci?

Badanie McKinsey 2024: Firmy z certyfikatem ISO 45001 osiƒÖgajƒÖ:
üìä 35% redukcjƒô koszt√≥w ubezpiecze≈Ñ OC
üìà 25% wzrost wydajno≈õci pracownik√≥w  
üìâ 45% spadek absencji chorobowej
‚öñÔ∏è 100% ochronƒô przed karami PIP

üî• ROI NAJWY≈ªSZY W:
‚Ä¢ Systemy wczesnego ostrzegania (340% ROI)
‚Ä¢ Szkolenia VR (280% ROI) 
‚Ä¢ Automatyzacja raportowania BHP (250% ROI)

Nowe przepisy 2025: Elektroniczna dokumentacja BHP obowiƒÖzkowa. Czy jeste≈õ gotowy?

üéØ EKSPRESS ANALIZA BHP
‚ö° Diagnoza w 24h + konkretne wyliczenia ROI
üí° Bonus: 10 najczƒôstszych b≈Çƒôd√≥w w BHP
üìß Zapytaj: multisafety.pl""",

            """üö® ALARMUJƒÑCE: 91% wypadk√≥w ≈õmiertelnych przy pracy mo≈ºna by≈Ço uniknƒÖƒá!

PIP na≈Ço≈ºy≈Ç w 2024 roku kary na kwotƒô 127 mln z≈Ç. Najwiƒôksza: 300 000 z≈Ç dla firmy budowlanej za brak systemu BHP.

‚úÖ Co chroni TwojƒÖ firmƒô:
‚Ä¢ Ocena ryzyka zgodna z PN-N-18002
‚Ä¢ Szkolenia BHP co 12 miesiƒôcy (nowe przepisy 2025)
‚Ä¢ Dokumentacja cyfrowa zgodna z ZRID
‚Ä¢ System ISO 45001 (‚àí35% koszt√≥w ubezpiecze≈Ñ)

‚öñÔ∏è PAMIƒòTAJ: Art. 207 KK = do 3 lat wiƒôzienia za sprowadzenie wypadku przy pracy.

üöÄ BEZP≈ÅATNY AUDIT BHP
‚úÖ Analiza ryzyka + plan dzia≈Çania w 48h
üí∞ Potencja≈Ç oszczƒôdno≈õci: 150-300k z≈Ç rocznie
üìû Sprawd≈∫: multisafety.pl"""
        ],
        
        "warnings": [
            """‚ö†Ô∏è UWAGA! Nowe kary PIP 2025 - do 500 000 z≈Ç!

Od 1 stycznia 2025 drastycznie wzrastajƒÖ kary za naruszenia BHP:
üí∏ Brak oceny ryzyka: 100 000 - 500 000 z≈Ç
üí∏ Nieprzeszkolony pracownik: 50 000 - 200 000 z≈Ç
üí∏ Brak dokumentacji: 30 000 - 150 000 z≈Ç

üö® NAJCZƒòSTSZE B≈ÅƒòDY 2024:
1. Brak aktualizacji oceny ryzyka (67% kar)
2. Niewa≈ºne szkolenia BHP (23% kar)  
3. Brak ≈õrodk√≥w ochrony (10% kar)

‚úÖ OCHRONA 100%:
‚Ä¢ Kompleksowy audit BHP
‚Ä¢ Aktualizacja dokumentacji
‚Ä¢ System zarzƒÖdzania ISO 45001

‚è∞ Zosta≈Ço 30 dni do wej≈õcia nowych przepis√≥w!

üÜò EKSPRESOWA POMOC
üìû Konsultacja w 2h + plan ochrony
üíº Pe≈Çna zgodno≈õƒá w 7 dni
üåê multisafety.pl"""
        ]
    },
    
    "it_security": {
        "tips": [
            """üõ°Ô∏è RODO 2024: Kary wzros≈Çy do rekordowego poziomu!

NAJWIƒòKSZE KARY W POLSCE:
üí∏ 9,6 mln z≈Ç - bank za naruszenia w systemach IT
üí∏ 2,8 mln z≈Ç - telekom za brak zabezpiecze≈Ñ
üí∏ 1,2 mln z≈Ç - e-commerce za phishing

‚ö° NOWE ZAGRO≈ªENIA 2024:
‚Ä¢ AI-powered ataki (+340%)
‚Ä¢ Ransomware kosztuje ≈õrednio 4,5 mln USD
‚Ä¢ Dyrektywa NIS2 - kary do 2% obrotu

üõ°Ô∏è CO CHRONI TWOJƒÑ FIRMƒò:
‚úÖ IOD (obowiƒÖzkowy dla 250+ os√≥b)
‚úÖ ISO 27001 (-80% ryzyka atak√≥w)
‚úÖ DPIA dla system√≥w HR
‚úÖ Backup 3-2-1 rule

72 godziny na zg≈Çoszenie naruszenia do IOD. P√≥≈∫niej = dodatkowa kara!

üöÄ BEZP≈ÅATNY AUDIT RODO
‚úÖ Analiza obecnego stanu + gap analysis
üí∞ Oszczƒôdno≈õci: -40% koszt√≥w cyber insurance
üìß Sprawd≈∫: multisafety.pl"""
        ]
    },
    
    "ce_marking": {
        "tips": [
            """üá™üá∫ Rynek UE wart 15 bln EUR rocznie. Bez znaku CE = 0 EUR dla Twojej firmy!

ALARMUJƒÑCE STATYSTYKI 2024:
üí∏ Kary do 100 000 EUR za produkty bez CE
üìà +150% koszt√≥w certyfikacji (8-12 miesiƒôcy oczekiwania)
‚öñÔ∏è Rozszerzona odpowiedzialno≈õƒá za ca≈Çy cykl ≈ºycia produktu
üîç Nadz√≥r rynku UE wycofa≈Ç 2847 produkt√≥w

üöÄ NOWE WYMAGANIA 2024/2025:
‚Ä¢ Cyber Resilience Act - CE dla produkt√≥w IT
‚Ä¢ Digital Product Passport obowiƒÖzkowy
‚Ä¢ AI Act - compliance dla system√≥w AI
‚Ä¢ Single Market Emergency Instrument

‚úÖ DROGA DO SUKCESU:
1. Analiza dyrektyw UE dla Twojego produktu
2. Dokumentacja techniczna Annex II
3. Testy w akredytowanych laboratoriach  
4. Deklaracja zgodno≈õci WE
5. Nadz√≥r post-market + vigilance

üí∞ ROI EKSPORTU:
Inwestycja 50k z≈Ç ‚Üí Potencja≈Ç eksportu: miliony EUR rocznie

üöÄ ≈öCIE≈ªKA DO RYNKU UE
‚úÖ Gap analysis + roadmapa certyfikacji
üí° Wsparcie w dokumentacji technicznej
‚ö° Fast-track przez nasze kontakty w JN
üìû Sprawd≈∫: multisafety.pl"""
        ]
    }
}

class AIContentGenerator:
    """Enhanced Generator tre≈õci AI dla MultiSafety.pl"""
    
    def __init__(self):
        self.ai_service = os.getenv('AI_SERVICE', 'premium')
        self.openai_client = None
        self.anthropic_client = None
        
        # Initialize AI clients if available
        if OPENAI_AVAILABLE and os.getenv('OPENAI_API_KEY'):
            openai.api_key = os.getenv('OPENAI_API_KEY')
            self.openai_client = openai
            
        if ANTHROPIC_AVAILABLE and os.getenv('ANTHROPIC_API_KEY'):
            self.anthropic_client = anthropic.Anthropic(
                api_key=os.getenv('ANTHROPIC_API_KEY')
            )

    def generate_post_content(self, request: ContentRequest) -> GeneratedContent:
        """Generuje tre≈õƒá posta dla MultiSafety.pl"""
        
        # Use AI if available, otherwise fallback to premium templates
        if self.openai_client or self.anthropic_client:
            return self._generate_ai_content(request)
        else:
            return self._generate_premium_template_content(request)
    
    def _generate_premium_template_content(self, request: ContentRequest) -> GeneratedContent:
        """Generuje tre≈õƒá z premium szablon√≥w MultiSafety"""
        
        # Get content pool for specialization
        spec_content = MULTISAFETY_PREMIUM_CONTENT.get(
            request.specialization, 
            MULTISAFETY_PREMIUM_CONTENT['bhp_ppoz']
        )
        
        # Choose content based on template type
        if request.template_type == 'warning':
            content_pool = spec_content.get('warnings', spec_content.get('tips', []))
        else:
            content_pool = spec_content.get('tips', [])
        
        if not content_pool:
            # Fallback content
            selected_content = """üí° Profesjonalne rozwiƒÖzania w zakresie bezpiecze≈Ñstwa

üî• MultiSafety oferuje kompleksowe wsparcie w obszarze:
‚Ä¢ BHP i PPO≈ª
‚Ä¢ Bezpiecze≈Ñstwo informacji i RODO  
‚Ä¢ Znak CE i doz√≥r urzƒÖdze≈Ñ
‚Ä¢ Szkolenia i audyty

‚úÖ Zaufa≈Ço nam ponad 500 firm
üìä 98% zadowolenia klient√≥w
‚ö° Wsparcie 24/7

üöÄ SKONTAKTUJ SIƒò Z NAMI
üìß Bezp≈Çatna konsultacja w 24h
üåê multisafety.pl"""
        else:
            selected_content = random.choice(content_pool)
        
        # Custom topic integration
        if request.custom_topic:
            selected_content = f"üìù {request.custom_topic}\n\n{selected_content}"
        
        # Extract components
        lines = selected_content.split('\n')
        
        # Find title/hook (first line with emoji)
        title = lines[0] if lines else "MultiSafety - Profesjonalne RozwiƒÖzania"
        hook = title
        
        # Main content (everything except hashtags)
        main_lines = []
        hashtag_lines = []
        
        for line in lines:
            if line.strip().startswith('#'):
                hashtag_lines.append(line.strip())
            else:
                main_lines.append(line)
        
        main_content = '\n'.join(main_lines)
        
        # Generate specialized hashtags
        hashtags = self._generate_specialized_hashtags(request.specialization)
        if hashtag_lines:
            # Extract hashtags from content
            for line in hashtag_lines:
                extracted = [tag.strip() for tag in line.split() if tag.startswith('#')]
                hashtags.extend(extracted)
        
        # Remove duplicates while preserving order
        unique_hashtags = []
        for tag in hashtags:
            if tag not in unique_hashtags:
                unique_hashtags.append(tag)
        hashtags = unique_hashtags[:12]  # Limit to 12 hashtags
        
        # CTA
        call_to_action = "üöÄ Sprawd≈∫: multisafety.pl\nüìß Bezp≈Çatna konsultacja"
        
        # Full text
        full_text = f"{main_content}\n\n{call_to_action}\n\n{' '.join(hashtags[:12])}"
        
        return GeneratedContent(
            title=title,
            hook=hook,
            main_content=main_content,
            call_to_action=call_to_action,
            hashtags=hashtags[:12],
            full_text=full_text
        )
    
    def _generate_specialized_hashtags(self, specialization: str) -> List[str]:
        """Generuje specjalistyczne hashtagi dla danej dziedziny"""
        
        base_hashtags = ["#MultiSafety", "#Bezpiecze≈ÑstwoPracy", "#Compliance"]
        
        specialized_hashtags = {
            "bhp_ppoz": [
                "#BHP", "#PPO≈ª", "#ISO45001", "#PIP", "#SzkoleniaBHP", 
                "#OcenaRyzyka", "#BezpiecznaFirma", "#OchronaPracownik√≥w",
                "#PrewencjaWypadk√≥w", "#ZarzƒÖdzanieBHP"
            ],
            "it_security": [
                "#RODO", "#Cyberbezpiecze≈Ñstwo", "#ISO27001", "#IOD", 
                "#OchronaDanych", "#NIS2", "#Prywatno≈õƒá", "#ITSecurity",
                "#Bezpiecze≈ÑstwoIT", "#GDPR"
            ],
            "ce_marking": [
                "#ZnakCE", "#CEMarking", "#UE", "#Eksport", "#Certyfikacja",
                "#NormyEuropejskie", "#Zgodno≈õƒá", "#RynekUE", "#ISO9001",
                "#DokumentacjaTechniczna"
            ],
            "equipment_supervision": [
                "#Doz√≥rTechniczny", "#InstalacjeElektryczne", "#Energetyka",
                "#Bezpiecze≈ÑstwoTechniczne", "#PreglƒÖdyTechniczne", "#UDT",
                "#InstalacjeGazowe", "#UrzƒÖdzeniaElektryczne"
            ]
        }
        
        spec_tags = specialized_hashtags.get(specialization, specialized_hashtags["bhp_ppoz"])
        
        # Combine base + specialized (random selection)
        selected_spec = random.sample(spec_tags, min(8, len(spec_tags)))
        
        return base_hashtags + selected_spec

    def _generate_ai_content(self, request: ContentRequest) -> GeneratedContent:
        """Generuje tre≈õƒá u≈ºywajƒÖc AI (OpenAI/Anthropic)"""
        
        prompt = self._create_ai_prompt(request)
        
        try:
            if self.openai_client:
                response = self.openai_client.ChatCompletion.create(
                    model="gpt-4",
                    messages=[
                        {"role": "system", "content": "Jeste≈õ ekspertem w tworzeniu tre≈õci marketingowych dla firm z bran≈ºy bezpiecze≈Ñstwa pracy."},
                        {"role": "user", "content": prompt}
                    ],
                    max_tokens=1000,
                    temperature=0.7
                )
                content = response.choices[0].message.content
                
            elif self.anthropic_client:
                response = self.anthropic_client.messages.create(
                    model="claude-3-sonnet-20240229",
                    max_tokens=1000,
                    messages=[
                        {"role": "user", "content": prompt}
                    ]
                )
                content = response.content[0].text
            else:
                raise Exception("No AI service available")
                
            return self._parse_ai_response(content, request.specialization)
            
        except Exception as e:
            print(f"AI generation failed: {e}")
            # Fallback to premium templates
            return self._generate_premium_template_content(request)
    
    def _create_ai_prompt(self, request: ContentRequest) -> str:
        """Tworzy prompt dla AI"""
        
        specialization_context = {
            "bhp_ppoz": "BHP (Bezpiecze≈Ñstwo i Higiena Pracy) oraz PPO≈ª (Przeciwpo≈ºarowe)",
            "it_security": "Bezpiecze≈Ñstwo informacji, RODO, cyberbezpiecze≈Ñstwo",
            "ce_marking": "Znak CE, certyfikacja produkt√≥w dla rynku UE",
            "equipment_supervision": "Doz√≥r techniczny urzƒÖdze≈Ñ i instalacji"
        }
        
        context = specialization_context.get(request.specialization, "bezpiecze≈Ñstwo pracy")
        
        prompt = f"""Stw√≥rz profesjonalny post na Instagram dla firmy MultiSafety.pl specjalizujƒÖcej siƒô w {context}.

Wymagania:
- Typ posta: {request.template_type}
- Temat: {request.custom_topic or 'og√≥lny'}
- Ton: profesjonalny, ekspertowski
- Grupa docelowa: CEO, kierownictwo firm
- D≈Çugo≈õƒá: 800-1200 znak√≥w
- Zawiera konkretne liczby/statystyki
- Call-to-action z multisafety.pl
- 8-12 relevantnych hashtag√≥w

Format odpowiedzi:
TYTU≈Å: [tytu≈Ç postu]
HOOK: [pierwsze zdanie przyciƒÖgajƒÖce uwagƒô]
TRE≈öƒÜ: [g≈Ç√≥wna tre≈õƒá]
CTA: [call to action]
HASHTAGI: [lista hashtag√≥w]"""

        return prompt
    
    def _parse_ai_response(self, content: str, specialization: str) -> GeneratedContent:
        """Parsuje odpowied≈∫ AI"""
        
        lines = content.split('\n')
        
        title = ""
        hook = ""
        main_content = ""
        call_to_action = ""
        hashtags = []
        
        current_section = ""
        
        for line in lines:
            line = line.strip()
            if line.upper().startswith('TYTU≈Å:'):
                title = line[6:].strip()
                current_section = "title"
            elif line.upper().startswith('HOOK:'):
                hook = line[5:].strip()
                current_section = "hook"
            elif line.upper().startswith('TRE≈öƒÜ:'):
                main_content = line[6:].strip()
                current_section = "content"
            elif line.upper().startswith('CTA:'):
                call_to_action = line[4:].strip()
                current_section = "cta"
            elif line.upper().startswith('HASHTAGI:'):
                hashtag_line = line[9:].strip()
                hashtags = [tag.strip() for tag in hashtag_line.split() if tag.startswith('#')]
                current_section = "hashtags"
            elif line and current_section == "content":
                main_content += "\n" + line
            elif line and current_section == "cta":
                call_to_action += "\n" + line
        
        # Fallback values
        if not title:
            title = "MultiSafety - Profesjonalne RozwiƒÖzania"
        if not hook:
            hook = title
        if not main_content:
            main_content = content[:500] + "..."
        if not call_to_action:
            call_to_action = "üöÄ Sprawd≈∫: multisafety.pl"
        if not hashtags:
            hashtags = self._generate_specialized_hashtags(specialization)
        
        full_text = f"{main_content}\n\n{call_to_action}\n\n{' '.join(hashtags[:12])}"
        
        return GeneratedContent(
            title=title,
            hook=hook,
            main_content=main_content,
            call_to_action=call_to_action,
            hashtags=hashtags[:12],
            full_text=full_text
        )

# Global instance
ai_generator = AIContentGenerator()
